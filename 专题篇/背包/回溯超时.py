class Solution:
    def canPartition(self, nums) :
        sum0 = sum(nums[:])
        print(sum0)
        flag = 0       
        def backtracking(sum1,start):
            
            if sum1 == sum0/2:
                nonlocal flag
                flag += 1

                return 
            if sum1 > sum0/2:
                return
            for i in range(start,len(nums)):
                sum1 += nums[i]
                backtracking(sum1,i+1)
                sum1 -= nums[i]

        backtracking(0,0)

        return True if flag >= 1 else False
ss = Solution()
str
print(ss.canPartition(str)) 